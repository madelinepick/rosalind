<header>
  <svg class='logo' width="481px" height="126px" viewBox="480 10 481 126" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">>
      <text id="Rosalind" stroke="none" fill="none" font-family="Inconsolata-Regular, Inconsolata" font-size="120" font-weight="normal">
          <tspan x="480" y="113" fill="#FFB438">Ro</tspan>
          <tspan x="600" y="113" fill="#D2FC61">sa</tspan>
          <tspan x="720" y="113" fill="#98F09A">li</tspan>
          <tspan x="840" y="113" fill="#5AD1E8">nd</tspan>
      </text>
  </svg>
  <ul>
    <li><a class='activenav' href="#">HOME</a></li>
    <li><a href="#">SETTINGS</a></li>
    <li><a href="/logout">LOGOUT</a></li>
  </ul>
</header>

<div class="main">
  <div class="tabnav ancestry">
    <a href="/ancestry"><h2>Ancestry</h2></a>
  </div>
  <div class="tabnav physical">
    <a href="/physical"><h2>Physical</h2></a>
  </div>
  <div class="tabnav mental">
    <a href="/mental"><h2>Mental</h2></a>
  </div>
  <div class="tabactive tabnav intentions">
    <a href="/intentions"><h2>Intentions</h2></a>
  </div>
  <div class="tab intentions">
    <div class="list">
      {{#each intentions}}
      <div class="listitem">
        <p class='intention'>{{this.description}}</p>
        {{#if this.end}}
        <i class="fa fa-check fa-2x"></i>
        {{else if this.start}}
        <button type="button" class='complete'>Complete</button>
        {{else}}
        <button type="button" class='start'>Start</button>
        {{/if}}
        {{#if this.end}}
        <h5>Completed: {{this.endFormatted}}</h5>
        {{else if this.start}}
        <h5>Started: {{this.startFormatted}}</h5>
        {{else}}
        <h5>Added: {{this.createFormatted}}</h5>
        {{/if}}
      </div>
      {{/each}}
    </div>
    <div class="intentionchart">
      <h2>Stages of Intentions</h2>
      <svg class="chart solid">
      </svg>
      <div class="key">
        <div class="square created">
        </div>
        <h4>Created</h4>
        <div class="square started">
        </div>
        <h4>Started</h4>
        <div class="square completed">
        </div>
        <h4>Completed</h4>
      </div>
      <h2 class='bump'>Percentage Progress</h2>
      <div class="pie">
      </div>
      <div class="key">
        <div class="square Perstarted">
        </div>
        <h4>Started but not completed</h4><br>
        <div class="square Percompleted">
        </div>
        <h4>Completed</h4>
      </div>
    </div>
  </div>
</div>

<div class="overlay overlaystart">
  <div class="overlayInset">
    <img class='close' src="https://api.icons8.com/download/6a145bf660d8bd09337d6169823882c8356a924c/iOS7/PNG/256/User_Interface/delete_sign-256.png" alt="" />
    <h2>Yay you started a thing! You're cool!</h2>
    <img class='reaction' src="https://media.giphy.com/media/4apcfHxnRfwjK/giphy.gif" alt="" />
  </div>
</div>

<div class="overlay overlaycomplete">
  <div class="overlayInset">
    <img class='close' src="https://api.icons8.com/download/6a145bf660d8bd09337d6169823882c8356a924c/iOS7/PNG/256/User_Interface/delete_sign-256.png" alt="" />
    <h2>Yay you completed a thing! You're awesome!</h2>
    <img class='reaction' src="https://media.giphy.com/media/l3V0GJ5mMTRoVFrY4/giphy.gif" alt="" />
  </div>
</div>

<script type="text/javascript">
var data = [];
data[0] = Number({{chartData.created}});
data[1] = Number({{chartData.started}});
data[2] = Number({{chartData.completed}});

var width = 275,
    barHeight = 40;

var color = d3.scale.ordinal()
    .range(["#49A4FF", "#F65B77","#98F09A"]);

var x = d3.scale.linear()
    .domain([0, d3.max(data)])
    .range([0, width]);

var chart = d3.select(".chart")
    .attr("width", width)
    .attr("height", barHeight * data.length);

var bar = chart.selectAll("g")
  .data(data)
  .enter().append("g")
  .attr("transform", function(d, i) { console.log(i);return "translate(0," + i * barHeight + ")"; });

bar.append("rect")
    .attr("width", x)
    .attr("height", barHeight - 1)
    .attr("fill",function(d,i){return color(i)});

bar.append("text")
    .attr("x", function(d) { return x(d) - 3; })
    .attr("y", barHeight / 2)
    .attr("dy", ".35em")
    .text(function(d) { return (d); });

// donut graph
var started = Math.round((1-{{chartData.completed}}/{{chartData.created}})*100)/100;
console.log(started);
var completed = Math.round({{chartData.completed}}/{{chartData.created}}*100)/100;

var data=[{"region":(started*100)+"%","Proportion":started},{"region":(completed*100)+"%","Proportion":completed}];

var finalData = [];

for (var i = 0; i < data.length; i++) {
  if(data[i].Proportion > 0){
    finalData.push(data[i])
  }
}

var width = 300,
    height = 300,
    padding = 20,
    radius = Math.min(width-padding, height-padding) / 2;

var color = d3.scale.ordinal()
    .range(["#5AD1E8", "#ffb438"]);

var arc = d3.svg.arc()
    .outerRadius(radius - 10)
    .innerRadius(radius - 100);

var pie = d3.layout.pie()
    .sort(null)
    .value(function (d) {
    return d.Proportion;
});

var svg = d3.select(".pie").append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var g = svg.selectAll(".arc")
        .data(pie(finalData))
        .enter().append("g")
        .attr("class", "arc");

    g.append("path")
        .attr("d", arc)
        .style("fill", function (d) {
        return color(d.data.region);
    });

    g.append("text")
        .attr("class", "charttext")
        .attr("transform", function (d) {
        return "translate(" + arc.centroid(d) + ")";
    })
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .style('font-size', "14px")
        .text(function (d) {
        return d.data.region;
      });

</script>
